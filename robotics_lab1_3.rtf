{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import cv2\
import numpy as np\
import matplotlib.pyplot as plt\
\
def image_enhancement(image_file):\
    # 1. Load the image\
    img = cv2.imread(image_file)\
    \
    if img is None:\
        print("Error: Unable to load image.")\
        return\
\
    # 2. Apply Gaussian Blur\
    blurred_img = cv2.GaussianBlur(img, (5, 5), 0)\
\
    # 3. Image Sharpening Techniques\
    # 3.1 Using a sharpening kernel\
    sharpening_kernel = np.array([[0, -1, 0],\
                                  [-1, 5, -1],\
                                  [0, -1, 0]])\
    sharpened_img_kernel = cv2.filter2D(img, -1, sharpening_kernel)\
\
    # 3.2 Unsharp Masking Technique\
    blurred_for_unsharp = cv2.GaussianBlur(img, (5, 5), 0)\
    sharpened_img_unsharp = cv2.addWeighted(img, 1.5, blurred_for_unsharp, -0.5, 0)\
\
    # 4. Edge Detection using Sobel operator\
    grayscale_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\
    sobel_x = cv2.Sobel(grayscale_img, cv2.CV_64F, 1, 0, ksize=5)\
    sobel_y = cv2.Sobel(grayscale_img, cv2.CV_64F, 0, 1, ksize=5)\
    edge_magnitude = cv2.magnitude(sobel_x, sobel_y)\
    edge_magnitude_abs = cv2.convertScaleAbs(edge_magnitude)\
\
    # Convert edge image to three-channel format\
    colored_edges = cv2.cvtColor(edge_magnitude_abs, cv2.COLOR_GRAY2BGR)\
\
    # 5. Merging results\
    merged_step_1 = cv2.addWeighted(blurred_img, 0.5, colored_edges, 0.5, 0)\
    final_combined_result = cv2.addWeighted(merged_step_1, 0.5, sharpened_img_kernel, 0.5, 0)\
\
    # 6. Displaying the images\
    def display_images():\
        plt.figure(figsize=(12, 10))\
        \
        # Original Image\
        plt.subplot(2, 3, 1)\
        plt.title('Original Image')\
        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\
        plt.axis('off')\
        \
        # Blurred Image\
        plt.subplot(2, 3, 2)\
        plt.title('Gaussian Blur')\
        plt.imshow(cv2.cvtColor(blurred_img, cv2.COLOR_BGR2RGB))\
        plt.axis('off')\
        \
        # Edge Detection Result\
        plt.subplot(2, 3, 3)\
        plt.title('Edge Detection (Sobel)')\
        plt.imshow(colored_edges)  \
        plt.axis('off')\
        \
        # Kernel Sharpened Image\
        plt.subplot(2, 3, 4)\
        plt.title('Sharpened (Kernel)')\
        plt.imshow(cv2.cvtColor(sharpened_img_kernel, cv2.COLOR_BGR2RGB))\
        plt.axis('off')\
        \
        # Unsharp Masked Image\
        plt.subplot(2, 3, 5)\
        plt.title('Sharpened (Unsharp Masking)')\
        plt.imshow(cv2.cvtColor(sharpened_img_unsharp, cv2.COLOR_BGR2RGB))\
        plt.axis('off')\
        \
        # Final Combined Result\
        plt.subplot(2, 3, 6)\
        plt.title('Final Combined Output')\
        plt.imshow(cv2.cvtColor(final_combined_result, cv2.COLOR_BGR2RGB))\
        plt.axis('off')\
\
        plt.tight_layout()\
        plt.show()\
\
    display_images()\
\
# Use your desired image path instead of 'image.jpg'\
image_enhancement('/content/_.jpeg')\
}